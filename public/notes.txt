# Python OO & Class

There are 3 programming paradigms. In early days, there was only procedural programming - program is written in a step by step manner, no magic, no fancy stuff. While it is very naive approach ans still used nowadays, it has some shotcomings: hard to read, hard to reuse (copy and paste).

OO is invented to simulate how the real world works. We put logic and data together inside the object.

FP as the name suggested, we describe the logic using function and attach function to the data, data-driven instead of process-driven. Function has no state, just logic, consistent input and output. Unlike OO, when putting different objects together, deveopers have to take the responsible to debug, reuse, and maintain the whole software. Software built with FP is relatively testable and reliable.

# Python Name Space

Names are identifiers, we use names to track objects - everything in Python is object, class, methods/functions, modules, and so on. Namespace is the naming hierarchy to name things in a way without any ambiguity. Namespaces are implemented as dictionaries in Python.

Scope is the boundary of the namespace which the particular objects are accessible by others.

Built-in scope is a special Python scope that’s created or loaded whenever you run a script or open an interactive session. This scope contains names such as keywords, functions, exceptions, and other attributes that are built into Python. Names in this Python scope are also available from everywhere in your code. It’s automatically loaded by Python when you run a program or script.

Global (or module) scope is the top-most scope in a Python program, script, or module. This Python scope contains all of the names that you define at the top level of a program or a module. Names in this Python scope are visible from everywhere in your code.

Enclosing (or nonlocal) scope is a special scope that only exists for nested functions. If the local scope is an inner or nested function, then the enclosing scope is the scope of the outer or enclosing function. This scope contains the names that you define in the enclosing function. The names in the enclosing scope are visible from the code of the inner and enclosing functions.

Local (or function) scope is the code block or body of any Python function or lambda expression. This Python scope contains the names that you define inside the function. These names will only be visible from the code of the function. It’s created at function call, not at function definition, so you’ll have as many different local scopes as function calls. This is true even if you call the same function multiple times, or recursively. Each call will result in a new local scope being created.

LEGB rule — a rule that defines the order of scopes following which a Python interpreter resolves the names (e.g., variables, functions) for any given operations (e.g., accessing attributes, calling functions).

# DSA

A data structure is a data organization, managment, and storage format that enables efficient access and modification. More precisely, a data structure is a collection of data values, the relationships among them, and the functions or operations that can be applied to the data.

An algorithm is a sequence of instructions, typically to solve a class of problems or perform a computation. Algorithms are unambiguous specifications for performing calculation, data processing, automated reasoing and other tasks.

algorithm:
  - precise input & output
  - clear and unambigurous steps
  - no unnecessary and redundant steps
  - must stop eventually and give expected output
DSA is by computer, for computer

# Complexity

Algorithm is a step by step pragmatic instruction to computer to solve problem

To design and implement a algorithm usually we sacrifice space to achieve fast performance, in another word time is more important than space. But in reality we still need to take care of memory usage or storage otherwise computer may hang or hitting out of memory error.

Data structure is our building blocks for algorithm, so when using these data structure we need to consider the performance of those most common operations, namely Accessing, Searching, Inserting, Deleting of data

# Big-O

Big-O indicating the complexity level not the exact number of operations or the exact size of space

How to Determine Complexities

# Array

Array is very simple but fundamental data structure because it represents the basic structure how we allocate and use memory.

Memory is like a big building and it contains many rooms, the room can store data, each room has a unique room number which is the address, the room size is same and in computer the size unit is byte and one byte equals to 8 bit, 0~255. one byte can store 8 0s to 8 1s, for unsigned integer, it means from 0 to 255.

By definition array should contain a numbers of element with same data type. String can be considered as an array of chars. We can use the index to identify the element.

Why the starting index is 0?

Memory is a limited resource in programing and memory allocation is quite complicated because we dont do memory allocation randomly and manually. A background process - Garbage collector (GC) will reclaim memory from programs smartly without our intervention.

# Dynamic Array

You may wonder how to implement a dynamic array, in fact it can be implemented by a normal array.

When we append, insert & delete, we touch not just a single element.

Memory is still a limited resource, the actual implementation of dynamic array has to take it into consideration. And memory management is a very complicated problem.

This over-allocates proportional to the list size, making room for additional growth. The over-allocation is mild but is enough to give linear-time amortized behavior over a long sequence of appends() in the presence of a poorly-performing system realloc().

Note: new_allocated won't overflow because the largest possible value is PY_SSIZE_T_MAX * (9 / 8) + 6 which always fits in a size_t.

# ADT vs. Data Structure

When studying algorithm, we use data structure such as Array, Dynamic Array, Linked List, as the solution or algorithm is programming language independent.

When coding or implementing the algorithm in a specific programming language like Python, we use data type like int, string, list which are supported by the language. Different programming language provides different builtin data types. Java has a few of linear data type: Array, ArrayList, AttributeList, LinkedList, Stack, and so on. We can implement more advanced data structure by using the builtin date types.

List could mean a dynamic array as a data structure but it is one Python collection data type. The name is same but it is used in different context and has different meaning.

# Stack

As we have known, any element in Array we can access directly by calling upon the index location, but unlike Array, for some linear data structure, the element can be accessed only in a particular order, Stack is one of them.

By definition, stack is a linear data structure that stores data in such a way that the last piece of data stored, is the first one retrieved also called last-in, first-out or first-in, last-out.

# Stack: Operations

Push & Pop are the 2 most important operations for stack. Push is to store an element to the top and stack size will increase 1. Be careful if the stack is full, pop will throw overflown exception. The opposite is Pop, pop is to remove the top element and the size will decrease 1. And if stack is empty, it will throw underflow exception.

# Stack Complexity

To access the bottom element of the stack, we have to remove all the elements above it, so the time complexity is O(n). This is the weakness when we apply stack to solve problem.

Search is similar to accessing.

As stack is LIFO we cannot insert and delete random element.

# Recursion

Recursion pattern: recursion includes 2 cases the base and the recursive case

Base case: the exist condition
Recursive case: reduce the original problem to a smaller version

Every single recursion function must have at least 1 base case and 1 recursive case.

To understand complicated concept like Recursion, its always good to start with example.

Big(O) of Fibonacci - iterative vs. recursive

Recursion is applied widely in many algorithms, so it is very important to master this technique.

Hopefully after the class, recursion is no more magic to you and you can understand how to resolve problem with recursion.

# Linked List

In previous class, we introduce 4 linear data structure and 3 of them are dynamic – dynamic array, stack and queue. As we know, they can be actually implemented by array and rely on resize() function to increase or decrease the memory size when we add/remove element.

Today we will introduce a new data structure - Linked List, which is truly dynamic data structure. Similar to Array, it is basic but very important data structure and it is widely used.

In Linked List, each a single node in the linked list has two parts, one is to store the actual data and  the other is a pointer or ref which points to the next node.

# Linked List Operations

For inserting, just need to create the new node and update the pre node

For deleting, just need to update the pre node and next node

Comparing Array, the accessing is slower but the update is much faster.

Besides Single Linked List, we have some other forms of linked list.

For Circular Linked List, the last element points back to the first element, instead of null

For Double Linked List, we have two pointers, one points to the previous node, the other points to the next.

To speed up the accessing, we can create the position class, each node is associated with a position object. We don’t use indexing as position as indexing can be changed as we remove/add the nodes. The actual position logic is up to the implementation.
